import { EventBase } from '${relativeToRoot}eventBase';
import { EventType, Type } from 'nanium/objects';
import { EventSubscription } from 'nanium/interfaces/eventSubscription';
import { ServiceManager } from 'nanium/interfaces/serviceManager';

@EventType({
	scope: '${scope}'
})
export class ${coreClassName}Event extends EventBase<${coreClassName}Event> {
	static eventName: string = '${prefix}:${subPath}${lastName}';

	// todo: define the events properties here
	@Type(String) someProperty: string;

	static override async subscribe(
		handler: (event: ${coreClassName}Event) => void,
		context?: ServiceManager | any
	): Promise<EventSubscription> {
		return await super.subscribe(handler, context);
	}
}
