import { Nocat } from 'nocat/core';
import { ServiceExecutionContext } from 'nocat/interfaces/serviceExecutionContext';
import { ServiceRequest } from 'nocat/interfaces/serviceRequest';
import { ServiceRequestQueueEntry } from 'nocat/interfaces/serviceRequestQueueEntry';
import { ServiceRequestHead } from './serviceRequestHead';

export class ServiceRequestBase<TRequestBody, TResponse> implements ServiceRequest<TResponse> {

	head: ServiceRequestHead;
	body: TRequestBody;

	constructor(body?: TRequestBody, head?: ServiceRequestHead) {
		this.body = body || {} as TRequestBody;
		this.head = head;
	}

	async execute(context: ServiceExecutionContext): Promise<TResponse> {
		return await Nocat.execute(this, undefined, context);
	}

	async enqueue(options?: Partial<ServiceRequestQueueEntry>): Promise<ServiceRequestQueueEntry> {
		const serviceName: string = (this.constructor as any).serviceName;
		return await Nocat.enqueue({ serviceName, request: this, ...options });
	}
}
